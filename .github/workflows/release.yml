name: vCore Release Management

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version'
        required: true
        default: '1.0.0'
      description:
        description: 'Release description'
        required: false

jobs:
  build:
    name: Build Release
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Extract version
        id: extract-version
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "version=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
            echo "description=${{ github.event.inputs.description }}" >> $GITHUB_OUTPUT
          else
            TAG=${GITHUB_REF#refs/tags/}
            VERSION=${TAG#v}
            echo "version=$VERSION" >> $GITHUB_OUTPUT
            echo "description=vCore Release $VERSION" >> $GITHUB_OUTPUT
          fi
        shell: bash
      
      - name: Set up JDK 17
        run: |
          sudo apt-get update
          sudo apt-get install -y wget gpg
          wget -O- https://apt.corretto.aws/corretto.key | sudo gpg --dearmor -o /usr/share/keyrings/corretto-keyring.gpg
          echo "deb [signed-by=/usr/share/keyrings/corretto-keyring.gpg] https://apt.corretto.aws stable main" | sudo tee /etc/apt/sources.list.d/corretto.list
          sudo apt-get update
          sudo apt-get install -y java-17-amazon-corretto-jdk
          echo "JAVA_HOME=/usr/lib/jvm/java-17-amazon-corretto" >> $GITHUB_ENV
          echo "$JAVA_HOME/bin" >> $GITHUB_PATH
        shell: bash
        
      - name: Setup Maven
        run: |
          mkdir -p $HOME/maven
          wget -q https://archive.apache.org/dist/maven/maven-3/3.8.6/binaries/apache-maven-3.8.6-bin.tar.gz -O $HOME/maven.tar.gz
          tar -xzf $HOME/maven.tar.gz -C $HOME/maven --strip-components=1
          echo "M2_HOME=$HOME/maven" >> $GITHUB_ENV
          echo "$HOME/maven/bin" >> $GITHUB_PATH
        shell: bash
      
      - name: Update version in pom.xml
        run: |
          VERSION="${{ steps.extract-version.outputs.version }}"
          mvn versions:set -DnewVersion=$VERSION -DgenerateBackupPoms=false
        shell: bash
      
      - name: Update plugin version
        run: |
          VERSION="${{ steps.extract-version.outputs.version }}"
          sed -i "s/PLUGIN_VERSION = \".*\"/PLUGIN_VERSION = \"$VERSION\"/" src/main/java/nl/vCore/Main.java
        shell: bash
        
      - name: Build with Maven
        run: mvn -B clean package --file pom.xml
        
      - name: Run tests
        run: mvn -B test
        
      - name: Generate Javadoc
        run: mvn javadoc:javadoc
      
      - name: Prepare release files
        run: |
          mkdir -p release
          cp target/*.jar release/vCore-${{ steps.extract-version.outputs.version }}.jar
          
          # Create release notes
          echo "# vCore ${{ steps.extract-version.outputs.version }}" > release/RELEASE_NOTES.md
          echo "" >> release/RELEASE_NOTES.md
          echo "${{ steps.extract-version.outputs.description }}" >> release/RELEASE_NOTES.md
          echo "" >> release/RELEASE_NOTES.md
          echo "## Changes since last release" >> release/RELEASE_NOTES.md
          
          # Extract commit messages
          git log $(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo --all)..HEAD --pretty=format:"- %s" >> release/RELEASE_NOTES.md
          
          # Create SHA256 checksums
          cd release
          sha256sum vCore-${{ steps.extract-version.outputs.version }}.jar > SHA256SUMS.txt
        shell: bash
      
      - name: Create GitHub Release
        id: create_release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Get release notes
          RELEASE_NOTES=$(cat release/RELEASE_NOTES.md)
          
          # Prepare JSON payload for GitHub API
          JSON_DATA=$(jq -n \
            --arg tag_name "v${{ steps.extract-version.outputs.version }}" \
            --arg name "vCore ${{ steps.extract-version.outputs.version }}" \
            --arg body "$RELEASE_NOTES" \
            --arg draft "false" \
            --arg prerelease "false" \
            '{tag_name: $tag_name, name: $name, body: $body, draft: $draft, prerelease: $prerelease}')
          
          # Create the release
          RESPONSE=$(curl -X POST \
            -H "Authorization: token $GITHUB_TOKEN" \
            -H "Accept: application/vnd.github.v3+json" \
            -d "$JSON_DATA" \
            "https://api.github.com/repos/$GITHUB_REPOSITORY/releases")
          
          # Extract the upload URL from the response
          UPLOAD_URL=$(echo "$RESPONSE" | jq -r .upload_url | sed 's/{?name,label}//')
          
          # Save the upload URL for the next steps
          echo "upload_url=$UPLOAD_URL" >> $GITHUB_OUTPUT
          
          if [ -z "$UPLOAD_URL" ] || [ "$UPLOAD_URL" = "null" ]; then
            echo "Failed to create release"
            echo "$RESPONSE"
            exit 1
          fi
        shell: bash
      
      - name: Upload Release Assets
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          UPLOAD_URL: ${{ steps.create_release.outputs.upload_url }}
        run: |
          # Upload the JAR file
          curl -X POST \
            -H "Authorization: token $GITHUB_TOKEN" \
            -H "Content-Type: application/java-archive" \
            -H "Accept: application/vnd.github.v3+json" \
            --data-binary @release/vCore-${{ steps.extract-version.outputs.version }}.jar \
            "${UPLOAD_URL}?name=vCore-${{ steps.extract-version.outputs.version }}.jar"
          
          # Upload the checksums
          curl -X POST \
            -H "Authorization: token $GITHUB_TOKEN" \
            -H "Content-Type: text/plain" \
            -H "Accept: application/vnd.github.v3+json" \
            --data-binary @release/SHA256SUMS.txt \
            "${UPLOAD_URL}?name=SHA256SUMS.txt"
          
          # Upload the release notes
          curl -X POST \
            -H "Authorization: token $GITHUB_TOKEN" \
            -H "Content-Type: text/markdown" \
            -H "Accept: application/vnd.github.v3+json" \
            --data-binary @release/RELEASE_NOTES.md \
            "${UPLOAD_URL}?name=RELEASE_NOTES.md"
        shell: bash

  deploy:
    name: Deploy Documentation
    runs-on: ubuntu-latest
    needs: build
    if: success()
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
      
      - name: Set up JDK 17
        run: |
          sudo apt-get update
          sudo apt-get install -y wget gpg
          wget -O- https://apt.corretto.aws/corretto.key | sudo gpg --dearmor -o /usr/share/keyrings/corretto-keyring.gpg
          echo "deb [signed-by=/usr/share/keyrings/corretto-keyring.gpg] https://apt.corretto.aws stable main" | sudo tee /etc/apt/sources.list.d/corretto.list
          sudo apt-get update
          sudo apt-get install -y java-17-amazon-corretto-jdk
          echo "JAVA_HOME=/usr/lib/jvm/java-17-amazon-corretto" >> $GITHUB_ENV
          echo "$JAVA_HOME/bin" >> $GITHUB_PATH
        shell: bash
        
      - name: Setup Maven
        run: |
          mkdir -p $HOME/maven
          wget -q https://archive.apache.org/dist/maven/maven-3/3.8.6/binaries/apache-maven-3.8.6-bin.tar.gz -O $HOME/maven.tar.gz
          tar -xzf $HOME/maven.tar.gz -C $HOME/maven --strip-components=1
          echo "M2_HOME=$HOME/maven" >> $GITHUB_ENV
          echo "$HOME/maven/bin" >> $GITHUB_PATH
        shell: bash
      
      - name: Generate Documentation
        run: mvn javadoc:javadoc
      
      - name: Deploy to GitHub Pages
        run: |
          # Setup git user
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          
          # Create gh-pages branch if it doesn't exist
          git fetch origin gh-pages || git branch gh-pages
          
          # Create temp directory for docs
          TEMP_DIR=$(mktemp -d)
          cp -r target/site/apidocs/* $TEMP_DIR
          
          # Switch to gh-pages branch
          git checkout gh-pages || git checkout --orphan gh-pages
          
          # Remove old content and add new content
          git rm -rf . || true
          cp -r $TEMP_DIR/* .
          
          # Create .nojekyll file to bypass GitHub Pages Jekyll processing
          touch .nojekyll
          
          # Commit and push
          git add .
          git commit -m "Update documentation for v${{ steps.extract-version.outputs.version }}" || echo "No changes to commit"
          git push origin gh-pages
        shell: bash 