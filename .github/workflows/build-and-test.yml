name: vCore Build and Test

on:
  push:
    branches: [ main, master, dev ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

jobs:
  build:
    name: Build and Test
    runs-on: ubuntu-latest
    
    steps:
      - name: Manual Repository Checkout
        run: |
          # Get repository information
          REPO_URL="https://github.com/${{ github.repository }}.git"
          
          # Clone the repository
          git clone $REPO_URL .
          
          # Checkout the correct branch or PR
          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            git fetch origin pull/${{ github.event.number }}/head:pr-${{ github.event.number }}
            git checkout pr-${{ github.event.number }}
          else
            git checkout ${{ github.ref_name }}
          fi
          
          # Set git identity for potential later commits
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          
          # List files to verify checkout
          ls -la
        shell: bash
      
      - name: Set up JDK 21
        run: |
          sudo apt-get update
          sudo apt-get install -y wget gpg
          wget -O- https://apt.corretto.aws/corretto.key | sudo gpg --dearmor -o /usr/share/keyrings/corretto-keyring.gpg
          echo "deb [signed-by=/usr/share/keyrings/corretto-keyring.gpg] https://apt.corretto.aws stable main" | sudo tee /etc/apt/sources.list.d/corretto.list
          sudo apt-get update
          sudo apt-get install -y java-21-amazon-corretto-jdk
          echo "JAVA_HOME=/usr/lib/jvm/java-21-amazon-corretto" >> $GITHUB_ENV
          echo "$JAVA_HOME/bin" >> $GITHUB_PATH
          java -version
        shell: bash
        
      - name: Setup Maven
        run: |
          mkdir -p $HOME/maven
          wget -q https://archive.apache.org/dist/maven/maven-3/3.8.6/binaries/apache-maven-3.8.6-bin.tar.gz -O $HOME/maven.tar.gz
          tar -xzf $HOME/maven.tar.gz -C $HOME/maven --strip-components=1
          echo "M2_HOME=$HOME/maven" >> $GITHUB_ENV
          echo "$HOME/maven/bin" >> $GITHUB_PATH
        shell: bash
      
      - name: Cache Maven packages
        run: |
          mkdir -p $HOME/.m2
          find $HOME/.m2 -name "_remote.repositories" -type f -delete
          find $HOME/.m2 -name "*.lastUpdated" -type f -delete
        shell: bash
      
      - name: Build with Maven
        run: mvn -B clean package --file pom.xml
        
      - name: Run tests
        run: mvn -B test
        
      - name: Generate Javadoc
        if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')
        run: mvn javadoc:javadoc
        
      - name: Archive artifacts
        if: success()
        run: |
          mkdir -p artifacts
          cp target/*.jar artifacts/
          
      - name: Custom Artifact Upload
        if: success()
        run: |
          # Create artifacts directory on the runner
          ARTIFACTS_DIR="${RUNNER_TEMP}/artifacts"
          mkdir -p "${ARTIFACTS_DIR}"
          
          # Copy artifacts
          cp -r artifacts/* "${ARTIFACTS_DIR}/"
          
          # Create artifact metadata and manifest
          echo '{
            "name": "vCore-artifacts",
            "retention-days": 14
          }' > "${ARTIFACTS_DIR}/__metadata.json"
          ls -la "${ARTIFACTS_DIR}" > "${ARTIFACTS_DIR}/manifest.txt"
          
          # Upload using GitHub's artifact upload REST API
          cd "${ARTIFACTS_DIR}"
          
          # Create a ZIP archive
          zip -r artifact.zip .
          
          # Upload using GitHub API
          curl -X POST \
            -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github.v3+json" \
            -H "Content-Type: application/zip" \
            --data-binary "@artifact.zip" \
            "https://uploads.github.com/repos/${{ github.repository }}/actions/runs/${{ github.run_id }}/artifacts"
        shell: bash
          
  analyze:
    name: Code Analysis
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'push' || github.event_name == 'pull_request'
    
    steps:
      - name: Manual Repository Checkout
        run: |
          # Get repository information
          REPO_URL="https://github.com/${{ github.repository }}.git"
          
          # Clone the repository
          git clone $REPO_URL .
          
          # Checkout the correct branch or PR
          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            git fetch origin pull/${{ github.event.number }}/head:pr-${{ github.event.number }}
            git checkout pr-${{ github.event.number }}
          else
            git checkout ${{ github.ref_name }}
          fi
          
          # List files to verify checkout
          ls -la
        shell: bash
        
      - name: Set up JDK 21
        run: |
          sudo apt-get update
          sudo apt-get install -y wget gpg
          wget -O- https://apt.corretto.aws/corretto.key | sudo gpg --dearmor -o /usr/share/keyrings/corretto-keyring.gpg
          echo "deb [signed-by=/usr/share/keyrings/corretto-keyring.gpg] https://apt.corretto.aws stable main" | sudo tee /etc/apt/sources.list.d/corretto.list
          sudo apt-get update
          sudo apt-get install -y java-21-amazon-corretto-jdk
          echo "JAVA_HOME=/usr/lib/jvm/java-21-amazon-corretto" >> $GITHUB_ENV
          echo "$JAVA_HOME/bin" >> $GITHUB_PATH
          java -version
        shell: bash
        
      - name: Setup Maven
        run: |
          mkdir -p $HOME/maven
          wget -q https://archive.apache.org/dist/maven/maven-3/3.8.6/binaries/apache-maven-3.8.6-bin.tar.gz -O $HOME/maven.tar.gz
          tar -xzf $HOME/maven.tar.gz -C $HOME/maven --strip-components=1
          echo "M2_HOME=$HOME/maven" >> $GITHUB_ENV
          echo "$HOME/maven/bin" >> $GITHUB_PATH
        shell: bash
      
      - name: Static Analysis with PMD
        run: |
          mkdir -p tools
          wget -q https://github.com/pmd/pmd/releases/download/pmd_releases%2F6.55.0/pmd-bin-6.55.0.zip -O tools/pmd.zip
          unzip -q tools/pmd.zip -d tools
          tools/pmd-bin-6.55.0/bin/run.sh pmd -d src/main/java -R rulesets/java/quickstart.xml -f text -r pmd-report.txt || true
          cat pmd-report.txt
        shell: bash
      
      - name: Find bugs with SpotBugs
        run: |
          mvn com.github.spotbugs:spotbugs-maven-plugin:4.7.3.4:check || true
        shell: bash

      - name: Custom Analysis Report Upload
        run: |
          # Create reports directory on the runner
          REPORTS_DIR="${RUNNER_TEMP}/analysis-reports"
          mkdir -p "${REPORTS_DIR}"
          
          # Copy reports
          cp pmd-report.txt "${REPORTS_DIR}/"
          [ -f "target/spotbugsXml.xml" ] && cp target/spotbugsXml.xml "${REPORTS_DIR}/" || echo "No SpotBugs reports found."
          
          # Create artifact metadata
          echo '{
            "name": "analysis-reports",
            "retention-days": 14
          }' > "${REPORTS_DIR}/__metadata.json"
          ls -la "${REPORTS_DIR}" > "${REPORTS_DIR}/manifest.txt"
          
          # Upload using GitHub's artifact upload REST API
          cd "${REPORTS_DIR}"
          
          # Create a ZIP archive
          zip -r reports.zip .
          
          # Upload using GitHub API
          curl -X POST \
            -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github.v3+json" \
            -H "Content-Type: application/zip" \
            --data-binary "@reports.zip" \
            "https://uploads.github.com/repos/${{ github.repository }}/actions/runs/${{ github.run_id }}/artifacts"
        shell: bash

  notify:
    name: Notifications
    runs-on: ubuntu-latest
    needs: [build, analyze]
    if: always()
    
    steps:
      - name: Prepare Notification
        id: notification
        run: |
          if [[ "${{ needs.build.result }}" == "success" && "${{ needs.analyze.result }}" == "success" ]]; then
            echo "status=Success: vCore build and analysis complete" >> $GITHUB_OUTPUT
          else
            echo "status=Failed: vCore build or analysis failed" >> $GITHUB_OUTPUT
          fi
        shell: bash
      
      - name: Send Mail Notification
        if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')
        run: |
          sudo apt-get update
          sudo apt-get install -y mailutils
          echo "${{ steps.notification.outputs.status }}" | mail -s "vCore Build Status" ${{ github.actor }}@users.noreply.github.com || true
        shell: bash 